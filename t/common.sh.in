#!/bin/bash
# @configure_input@
# Common code for test scripts.
# configure puts the generated common.sh in the builddir for t/, which is
# the cwd when the test programs run.  Therefore, test scripts can say
# `. common.sh` to pick up the generated file.

# Abort on exit.  In this framework, tests that run to completion have
# succeeded.  TODO be more sophisticated.
set -euo pipefail

# Permit core dumps
ulimit -c unlimited || true
sysctl kernel.core_pattern || true

# Directories
export pgmdir="@abs_top_builddir@/src"
export tpgmdir="@abs_top_builddir@/t"
export here
here="$(cd "$(dirname "$0")" ; pwd)"

# Other vars
export unbuffer_pgm="@UNBUFFER@"
assertions_run=0

# Find out if a PID represents a running process
process-exists() {
    (( ++assertions_run ))
    if [[ "$1" ]]; then
        kill -n 0 "$@" &>/dev/null
    else
        return 1    # no param, or empty param => not a process
    fi
}

# grep for a Perl regex... using Perl!  Processes stdin.  Succeeds if any
# line in the input matches the pattern; fails otherwise.  Usage:
#   cat foo | has-line-matching '/quux\e/'
has-line-matching() {
    (( ++assertions_run ))
    local -r pat="$1"
    shift
    perl -Mstrict -Mwarnings -Mvars='$exitcode' -ne '
                BEGIN { $exitcode=1 }
                $exitcode=0,last if m{'"$pat"'};
                END { exit $exitcode }' "$@"
}

# Kill a process if it exists.  Usage: kill-if-exists PID LABEL
kill-if-exists() {
    if process-exists "$1" ; then
        echo "=== Killing $2 ===" 1>&2
        kill "$1"
    fi
}

# print a message and exit with an appropriate exit code.  No parameters.
report-and-exit() {
    if (( assertions_run == 0 )); then
        echo "No tests ran!"
        exit 1
    else
        echo "All tests passed"
        exit 0
    fi
}

# Check whether a file (default stdin) does NOT match a particular Perl regex.
# Usage:
#   some-program | does-not-contain RE
# or
#   does-not-contain RE INPUT-FILE
does-not-contain() {
    (( ++assertions_run ))
    local -r regex="$1"
    shift
    perl -Mstrict -Mwarnings -ne 'm{'"$regex"'} and exit(1); END { exit(0) }' "$@"
}
